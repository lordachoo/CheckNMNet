#!/bin/bash

# Network Connectivity Checker - Complete Working Version
set -euo pipefail

# Configuration
VERBOSE=false
CLUSTER_FILE=""
EXCLUDE_LOOPBACK=true

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Usage function
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Network Interface Subnet Compatibility Checker for RHEL8 Cluster Nodes

DEFAULT BEHAVIOR:
    Analyzes local network interfaces for subnet compatibility.
    Perfect for collecting data via mmdsh or standalone analysis.

OPTIONS:
    -h, --help              Show this help message
    -v, --verbose           Enable verbose output
    -f, --cluster-file FILE File containing cluster interface info for comparison
    --dry-run              Show what would be analyzed without running

EXAMPLES:
    # Local interface analysis (for mmdsh data collection)
    $0 -v

    # Collect cluster data via mmdsh
    mmdsh -N all -f1 '$0 -v' > cluster_interfaces.txt

    # Analyze cluster-wide compatibility using collected data
    $0 -f cluster_interfaces.txt -v

WORKFLOW:
    1. Collect cluster data: mmdsh -N all -f1 '/path/to/checkNet.sh -v' > cluster_nets.txt
    2. Analyze compatibility: $0 -f cluster_nets.txt -v

EOF
}

# Logging function
log() {
    local level="$1"
    shift
    local message="$*"
    
    case "$level" in
        "ERROR")
            echo -e "${RED}[ERROR]${NC} $message" >&2
            ;;
        "WARN")
            echo -e "${YELLOW}[WARN]${NC} $message" >&2
            ;;
        "INFO")
            if [[ "$VERBOSE" == "true" ]]; then
                echo -e "${BLUE}[INFO]${NC} $message"
            fi
            ;;
        "SUCCESS")
            echo -e "${GREEN}[SUCCESS]${NC} $message"
            ;;
        "ANALYSIS")
            echo -e "${CYAN}[ANALYSIS]${NC} $message"
            ;;
        *)
            echo "$message"
            ;;
    esac
}

# Calculate network address from CIDR
get_network_address() {
    local cidr="$1"
    local ip="${cidr%/*}"
    local prefix="${cidr#*/}"
    
    # Convert IP to integer for calculation
    IFS='.' read -r a b c d <<< "$ip"
    local ip_int=$(( (a << 24) + (b << 16) + (c << 8) + d ))
    
    # Calculate subnet mask
    local mask_int=$(( 0xFFFFFFFF << (32 - prefix) ))
    local network_int=$(( ip_int & mask_int ))
    
    # Convert back to dotted decimal
    local net_a=$(( (network_int >> 24) & 0xFF ))
    local net_b=$(( (network_int >> 16) & 0xFF ))
    local net_c=$(( (network_int >> 8) & 0xFF ))
    local net_d=$(( network_int & 0xFF ))
    
    echo "${net_a}.${net_b}.${net_c}.${net_d}/${prefix}"
}

# Get network interfaces using NetworkManager
get_network_interfaces() {
    local interfaces=()
    
    # Get active connections from NetworkManager
    while IFS= read -r line; do
        if [[ -n "$line" && "$line" != "NAME" ]]; then
            # Skip loopback if excluded
            if [[ "$EXCLUDE_LOOPBACK" == "true" && "$line" == "lo" ]]; then
                continue
            fi
            interfaces+=("$line")
        fi
    done < <(nmcli -t -f DEVICE con show --active | cut -d: -f1 | sort -u)
    
    printf '%s\n' "${interfaces[@]}"
}

# Get IP address and subnet for an interface
get_interface_info() {
    local interface="$1"
    local ip_info
    
    # Get IP address using NetworkManager
    ip_info=$(nmcli -t -f IP4.ADDRESS dev show "$interface" 2>/dev/null | cut -d: -f2 | head -n1)
    
    if [[ -n "$ip_info" ]]; then
        echo "$ip_info"
    else
        # Fallback to ip command
        ip addr show "$interface" 2>/dev/null | grep -oP 'inet \K[\d.]+/\d+' | head -n1
    fi
}

# Check if interface is up
is_interface_up() {
    local interface="$1"
    local state
    
    state=$(nmcli -t -f GENERAL.STATE dev show "$interface" 2>/dev/null | cut -d: -f2)
    
    if [[ "$state" == "100 (connected)" ]]; then
        return 0
    else
        # Fallback check using ip command
        ip link show "$interface" 2>/dev/null | grep -q "state UP"
    fi
}

# Analyze local interface subnets
analyze_local_subnets() {
    local hostname=$(hostname -s)
    local interfaces
    mapfile -t interfaces < <(get_network_interfaces)
    
    if [[ ${#interfaces[@]} -eq 0 ]]; then
        log "ERROR" "No active network interfaces found"
        return 1
    fi
    
    log "INFO" "Analyzing local interface subnet configuration on $hostname"
    
    # Group interfaces by subnet
    declare -A subnet_groups
    declare -A interface_subnets
    
    for interface in "${interfaces[@]}"; do
        # Check if interface is up
        if ! is_interface_up "$interface"; then
            log "WARN" "$interface: Interface is DOWN - skipping"
            continue
        fi
        
        # Get interface IP information
        local ip_cidr
        ip_cidr=$(get_interface_info "$interface")
        
        if [[ -z "$ip_cidr" ]]; then
            log "WARN" "$interface: No IP address configured - skipping"
            continue
        fi
        
        local subnet=$(get_network_address "$ip_cidr")
        interface_subnets["$interface"]="$ip_cidr"
        subnet_groups["$subnet"]+="$interface "
        
        # Display interface status (similar to your example output)
        printf "%-20s %-15s %-10s %s\n" "$hostname:" "$interface" "UP" "$ip_cidr"
        log "INFO" "$interface: $ip_cidr (subnet: $subnet)"
    done
    
    echo
    
    # Analyze subnet conflicts
    local conflicts=0
    for subnet in "${!subnet_groups[@]}"; do
        local interfaces_in_subnet=(${subnet_groups[$subnet]})
        if [[ ${#interfaces_in_subnet[@]} -gt 1 ]]; then
            log "WARN" "Multiple interfaces in same subnet $subnet: ${interfaces_in_subnet[*]}"
            ((conflicts++))
        else
            log "INFO" "Subnet $subnet: ${interfaces_in_subnet[0]} (unique)"
        fi
    done
    
    if [[ $conflicts -eq 0 ]]; then
        log "SUCCESS" "✓ No subnet conflicts found on local node"
    else
        log "WARN" "⚠ Found $conflicts subnet conflict(s) on local node"
    fi
    
    return 0
}

# Parse cluster interface file and analyze subnet compatibility
analyze_cluster_subnets() {
    local cluster_file="$1"
    
    if [[ ! -f "$cluster_file" ]]; then
        log "ERROR" "Cluster file not found: $cluster_file"
        return 1
    fi
    
    log "INFO" "Analyzing cluster subnet compatibility from: $cluster_file"
    
    # Simple arrays to store data
    declare -A interface_data  # interface_name -> "node1:ip1 node2:ip2 ..."
    declare -A p2p_subnets     # subnet -> "node1:interface1:ip1 node2:interface2:ip2"
    declare -A all_nodes
    
    # Parse the file and collect data
    while IFS= read -r line; do
        # Skip empty lines, comments, and log messages
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        [[ "$line" =~ \[INFO\]|\[WARN\]|\[ERROR\]|\[SUCCESS\]|\[ANALYSIS\] ]] && continue
        
        # Parse line format from mmdsh output
        if [[ "$line" =~ ^([^:]+):[[:space:]]*([^:]+):[[:space:]]*([^[:space:]]+)[[:space:]]+([^[:space:]]+)[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+) ]]; then
            local hostname="${BASH_REMATCH[2]}"
            local interface="${BASH_REMATCH[3]}"
            local status="${BASH_REMATCH[4]}"
            local ip_cidr="${BASH_REMATCH[5]}"
            
            # Clean up hostname
            hostname=$(echo "$hostname" | sed 's/[[:space:]]*$//' | cut -d'.' -f1)
            
            # Only process UP interfaces
            if [[ "$status" == "UP" ]]; then
                # Store interface data
                interface_data["$interface"]+="$hostname:$ip_cidr "
                all_nodes["$hostname"]=1
                
                # If /31, add to P2P map
                if [[ "$ip_cidr" =~ /31$ ]]; then
                    local subnet=$(get_network_address "$ip_cidr")
                    p2p_subnets["$subnet"]+="$hostname:$interface:$ip_cidr "
                fi
                
                log "INFO" "Parsed: $hostname -> $interface ($ip_cidr)"
            fi
        fi
    done < "$cluster_file"
    
    # Check if we found data
    if [[ ${#interface_data[@]} -eq 0 ]]; then
        log "ERROR" "No interface data found in cluster file"
        return 1
    fi
    
    log "INFO" "Found ${#all_nodes[@]} nodes with ${#interface_data[@]} interface types"
    log "INFO" "Nodes: ${!all_nodes[*]}"
    log "INFO" "Interface types: ${!interface_data[*]}"
    echo
    
    # Analyze each interface
    local total_groups=0
    local compatible_groups=0
    local point_to_point_groups=0
    
    for interface_name in "${!interface_data[@]}"; do
        ((total_groups++))
        log "ANALYSIS" "Analyzing interface group: $interface_name"
        
        # Get the data for this interface
        local data="${interface_data[$interface_name]}"
        local node_ips=()
        local subnets_found=()
        
        # Parse node:ip pairs
        for entry in $data; do
            [[ -z "$entry" ]] && continue
            node_ips+=("$entry")
            
            local hostname="${entry%:*}"
            local ip_cidr="${entry#*:}"
            local subnet=$(get_network_address "$ip_cidr")
            
            log "INFO" "  $hostname: $ip_cidr (subnet: $subnet)"
            
            # Add unique subnets
            if [[ ! " ${subnets_found[*]} " =~ " ${subnet} " ]]; then
                subnets_found+=("$subnet")
            fi
        done
        
        local num_subnets=${#subnets_found[@]}
        local num_nodes=${#node_ips[@]}
        
        # Check if /31 point-to-point
        local is_p2p=false
        if [[ ${node_ips[0]} =~ /31$ ]]; then
            is_p2p=true
        fi
        
        if [[ $num_subnets -eq 1 ]]; then
            ((compatible_groups++))
            log "SUCCESS" "  ✓ Interface $interface_name: All $num_nodes nodes in same subnet (${subnets_found[0]})"
        elif [[ "$is_p2p" == "true" ]]; then
            log "ANALYSIS" "  Point-to-point (/31) interface detected"
            
            local valid_pairs=0
            local invalid_pairs=0
            local cross_interface_pairs=0
            local processed_subnets=()
            
            # Check each node's subnet
            for entry in $data; do
                [[ -z "$entry" ]] && continue
                
                local hostname="${entry%:*}"
                local ip_cidr="${entry#*:}"
                local subnet=$(get_network_address "$ip_cidr")
                
                # Skip if we already processed this subnet
                if [[ " ${processed_subnets[*]} " =~ " ${subnet} " ]]; then
                    continue
                fi
                processed_subnets+=("$subnet")
                
                # Get all nodes in this P2P subnet (from global map)
                local subnet_data="${p2p_subnets[$subnet]:-}"
                if [[ -n "$subnet_data" ]]; then
                    local subnet_entries=($subnet_data)
                    local subnet_count=${#subnet_entries[@]}
                    
                    if [[ $subnet_count -eq 2 ]]; then
                        # Parse both nodes
                        local node1_parts=(${subnet_entries[0]//:/ })
                        local node2_parts=(${subnet_entries[1]//:/ })
                        local node1_name="${node1_parts[0]}"
                        local node1_iface="${node1_parts[1]}"
                        local node1_ip="${node1_parts[2]}"
                        local node2_name="${node2_parts[0]}"
                        local node2_iface="${node2_parts[1]}"
                        local node2_ip="${node2_parts[2]}"
                        
                        ((valid_pairs++))
                        
                        if [[ "$node1_iface" == "$node2_iface" ]]; then
                            log "SUCCESS" "    ✓ Valid P2P link: $node1_name[$node1_iface] ↔ $node2_name[$node2_iface] ($subnet)"
                        else
                            ((cross_interface_pairs++))
                            log "SUCCESS" "    ✓ Valid P2P link: $node1_name[$node1_iface] ↔ $node2_name[$node2_iface] ($subnet)"
                            log "WARN" "      ⚠ Cross-interface connection: $node1_iface ↔ $node2_iface"
                        fi
                        log "INFO" "      $node1_name: $node1_ip ↔ $node2_name: $node2_ip"
                    elif [[ $subnet_count -eq 1 ]]; then
                        ((invalid_pairs++))
                        log "WARN" "    ⚠ Unpaired node: $hostname[$interface_name] ($ip_cidr)"
                    else
                        ((invalid_pairs++))
                        log "ERROR" "    ✗ Invalid P2P subnet: $subnet has $subnet_count nodes"
                    fi
                fi
            done
            
            if [[ $invalid_pairs -eq 0 ]]; then
                ((point_to_point_groups++))
                if [[ $cross_interface_pairs -gt 0 ]]; then
                    log "SUCCESS" "  ✓ Interface $interface_name: All $valid_pairs P2P links are paired ($cross_interface_pairs cross-interface)"
                else
                    log "SUCCESS" "  ✓ Interface $interface_name: All $valid_pairs point-to-point links are properly paired"
                fi
            else
                log "ERROR" "  ✗ Interface $interface_name: $invalid_pairs problematic P2P links found"
            fi
        else
            log "ERROR" "  ✗ Interface $interface_name: Multiple incompatible subnets!"
            log "ERROR" "    Found $num_subnets different subnets: ${subnets_found[*]}"
            
            # Show nodes per subnet
            for subnet in "${subnets_found[@]}"; do
                local nodes_in_subnet=()
                for entry in $data; do
                    local hostname="${entry%:*}"
                    local ip_cidr="${entry#*:}"
                    local node_subnet=$(get_network_address "$ip_cidr")
                    if [[ "$node_subnet" == "$subnet" ]]; then
                        nodes_in_subnet+=("$hostname")
                    fi
                done
                log "WARN" "    Subnet $subnet: ${nodes_in_subnet[*]}"
            done
        fi
        echo
    done
    
    # Summary
    log "ANALYSIS" "Cluster subnet compatibility summary:"
    log "INFO" "Total interface groups analyzed: $total_groups"
    log "INFO" "Compatible interface groups: $compatible_groups"
    log "INFO" "Point-to-point interface groups: $point_to_point_groups"
    
    local total_compatible=$((compatible_groups + point_to_point_groups))
    if [[ $total_compatible -eq $total_groups ]]; then
        log "SUCCESS" "✓ All interface groups have compatible subnet configurations"
        return 0
    else
        local failed_groups=$((total_groups - total_compatible))
        log "ERROR" "✗ $failed_groups interface group(s) have subnet configuration issues"
        return 1
    fi
}

# Parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -f|--cluster-file)
                CLUSTER_FILE="$2"
                shift 2
                ;;
            --include-loopback)
                EXCLUDE_LOOPBACK=false
                shift
                ;;
            --dry-run)
                echo "DRY RUN MODE - Would analyze the following interfaces:"
                get_network_interfaces | while read -r iface; do
                    local ip_cidr=$(get_interface_info "$iface")
                    local status="UP"
                    is_interface_up "$iface" || status="DOWN"
                    printf "%-20s %-15s %-10s %s\n" "$(hostname -s):" "$iface" "$status" "${ip_cidr:-N/A}"
                done
                exit 0
                ;;
            *)
                log "ERROR" "Unknown option: $1"
                usage
                exit 1
                ;;
        esac
    done
}

# Main execution
main() {
    parse_arguments "$@"
    
    # Check for required tools
    for tool in nmcli ip; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            log "ERROR" "Required tool '$tool' not found"
            exit 1
        fi
    done
    
    # If cluster file is provided, analyze it instead of local interfaces
    if [[ -n "$CLUSTER_FILE" ]]; then
        if analyze_cluster_subnets "$CLUSTER_FILE"; then
            exit 0
        else
            exit 1
        fi
    else
        # Run local interface analysis
        if analyze_local_subnets; then
            exit 0
        else
            exit 1
        fi
    fi
}

# Execute main function with all arguments
main "$@"